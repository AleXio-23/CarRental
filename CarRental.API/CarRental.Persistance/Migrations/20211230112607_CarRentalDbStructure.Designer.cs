// <auto-generated />
using System;
using CarRental.Persistance.Database.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.Persistance.Migrations
{
    [DbContext(typeof(CarRentalAppDbContext))]
    [Migration("20211230112607_CarRentalDbStructure")]
    partial class CarRentalDbStructure
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarRental.Domain.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Car.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CarModelId")
                        .HasColumnType("int");

                    b.Property<string>("CarRegisterNumber")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<decimal>("EngineCapacity")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LocationCityId")
                        .HasColumnType("int");

                    b.Property<int>("LocationCountryId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int>("PriceCourseId")
                        .HasColumnType("int");

                    b.Property<int>("PriceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<int>("TransmisionId")
                        .HasColumnType("int");

                    b.Property<string>("VinNum")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int>("WheelTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarCategoryId");

                    b.HasIndex("CarModelId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("LocationCityId");

                    b.HasIndex("LocationCountryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PriceCourseId");

                    b.HasIndex("PriceTypeId");

                    b.HasIndex("TransmisionId");

                    b.HasIndex("WheelTypeId");

                    b.ToTable("Car", "car");
                });

            modelBuilder.Entity("CarRental.Domain.Car.CarOwnerShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("CarOwnerShip", "car");
                });

            modelBuilder.Entity("CarRental.Domain.Car.CarRentalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CarRentalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("LandLordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentDateFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RentDateTo")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CarRentalStatusId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LandLordId");

                    b.ToTable("CarRentalHistory", "car");
                });

            modelBuilder.Entity("CarRental.Domain.Car.CarRentalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CarRentalStatus", "dictionary");
                });

            modelBuilder.Entity("CarRental.Domain.Car.CurrentCarRentalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("CarRentalStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("LandLordId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RentDateFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RentDateTo")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CarRentalStatusId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LandLordId");

                    b.ToTable("CurrentCarRentalStatus", "car");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.CarCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.ToTable("CarCategory", "dictionary");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CarModel", "dictionary");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City", "dictionary");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Country", "dictionary");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FuelTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("FuelType", "dictionary");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturer", "dictionary");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.PriceCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PriceCourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("PriceCourse", "dictionary");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.PriceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PriceTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("PriceType", "dictionary");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.Transmision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TransmisionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Transmision", "dictionary");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.WheelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("WheelTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("WheelType", "dictionary");
                });

            modelBuilder.Entity("CarRental.Domain.User.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Firstname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PersonalNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Phone1")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Phone2")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfile", "user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarRental.Domain.Car.Car", b =>
                {
                    b.HasOne("CarRental.Domain.Dictionary.CarCategory", "CarCategory")
                        .WithMany("Cars")
                        .HasForeignKey("CarCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Car__CarCategory__498EEC8D");

                    b.HasOne("CarRental.Domain.Dictionary.CarModel", "CarModel")
                        .WithMany("Cars")
                        .HasForeignKey("CarModelId")
                        .IsRequired()
                        .HasConstraintName("FK__Car__CarModelId__489AC854");

                    b.HasOne("CarRental.Domain.Dictionary.FuelType", "FuelType")
                        .WithMany("Cars")
                        .HasForeignKey("FuelTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Car__FuelTypeId__4D5F7D71");

                    b.HasOne("CarRental.Domain.Dictionary.City", "LocationCity")
                        .WithMany("Cars")
                        .HasForeignKey("LocationCityId")
                        .IsRequired()
                        .HasConstraintName("FK__Car__LocationCit__503BEA1C");

                    b.HasOne("CarRental.Domain.Dictionary.Country", "LocationCountry")
                        .WithMany("Cars")
                        .HasForeignKey("LocationCountryId")
                        .IsRequired()
                        .HasConstraintName("FK__Car__LocationCou__4F47C5E3");

                    b.HasOne("CarRental.Domain.Dictionary.Manufacturer", "Manufacturer")
                        .WithMany("Cars")
                        .HasForeignKey("ManufacturerId")
                        .IsRequired()
                        .HasConstraintName("FK__Car__Manufacture__47A6A41B");

                    b.HasOne("CarRental.Domain.Dictionary.PriceCourse", "PriceCourse")
                        .WithMany("Cars")
                        .HasForeignKey("PriceCourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Car__PriceCourse__4B7734FF");

                    b.HasOne("CarRental.Domain.Dictionary.PriceType", "PriceType")
                        .WithMany("Cars")
                        .HasForeignKey("PriceTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Car__PriceTypeId__4A8310C6");

                    b.HasOne("CarRental.Domain.Dictionary.Transmision", "Transmision")
                        .WithMany("Cars")
                        .HasForeignKey("TransmisionId")
                        .IsRequired()
                        .HasConstraintName("FK__Car__Transmision__4C6B5938");

                    b.HasOne("CarRental.Domain.Dictionary.WheelType", "WheelType")
                        .WithMany("Cars")
                        .HasForeignKey("WheelTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Car__WheelTypeId__4E53A1AA");

                    b.Navigation("CarCategory");

                    b.Navigation("CarModel");

                    b.Navigation("FuelType");

                    b.Navigation("LocationCity");

                    b.Navigation("LocationCountry");

                    b.Navigation("Manufacturer");

                    b.Navigation("PriceCourse");

                    b.Navigation("PriceType");

                    b.Navigation("Transmision");

                    b.Navigation("WheelType");
                });

            modelBuilder.Entity("CarRental.Domain.Car.CarOwnerShip", b =>
                {
                    b.HasOne("CarRental.Domain.Car.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__CarOwnerS__CarId__5E8A0973");

                    b.HasOne("CarRental.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__CarOwnerS__UserI__5D95E53A");

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRental.Domain.Car.CarRentalHistory", b =>
                {
                    b.HasOne("CarRental.Domain.Car.Car", "Car")
                        .WithMany("CarRentalHistories")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__CarRental__CarId__55F4C372");

                    b.HasOne("CarRental.Domain.Car.CarRentalStatus", "CarRentalStatus")
                        .WithMany("CarRentalHistories")
                        .HasForeignKey("CarRentalStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__CarRental__CarRe__55009F39");

                    b.HasOne("CarRental.Domain.Auth.User", "Customer")
                        .WithMany("CarRentalHistoryCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__CarRental__Custo__540C7B00");

                    b.HasOne("CarRental.Domain.Auth.User", "LandLord")
                        .WithMany("CarRentalHistoryLandLords")
                        .HasForeignKey("LandLordId")
                        .IsRequired()
                        .HasConstraintName("FK__CarRental__LandL__531856C7");

                    b.Navigation("Car");

                    b.Navigation("CarRentalStatus");

                    b.Navigation("Customer");

                    b.Navigation("LandLord");
                });

            modelBuilder.Entity("CarRental.Domain.Car.CurrentCarRentalStatus", b =>
                {
                    b.HasOne("CarRental.Domain.Car.Car", "Car")
                        .WithMany("CurrentCarRentalStatuses")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__CurrentCa__CarId__5BAD9CC8");

                    b.HasOne("CarRental.Domain.Car.CarRentalStatus", "CarRentalStatus")
                        .WithMany("CurrentCarRentalStatuses")
                        .HasForeignKey("CarRentalStatusId")
                        .HasConstraintName("FK__CurrentCa__CarRe__5AB9788F");

                    b.HasOne("CarRental.Domain.Auth.User", "Customer")
                        .WithMany("CurrentCarRentalStatusCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__CurrentCa__Custo__59C55456");

                    b.HasOne("CarRental.Domain.Auth.User", "LandLord")
                        .WithMany("CurrentCarRentalStatusLandLords")
                        .HasForeignKey("LandLordId")
                        .HasConstraintName("FK__CurrentCa__LandL__58D1301D");

                    b.Navigation("Car");

                    b.Navigation("CarRentalStatus");

                    b.Navigation("Customer");

                    b.Navigation("LandLord");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.City", b =>
                {
                    b.HasOne("CarRental.Domain.Dictionary.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__City__CountryId__245D67DE");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CarRental.Domain.User.UserProfile", b =>
                {
                    b.HasOne("CarRental.Domain.Auth.User", "User")
                        .WithMany("UserProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__UserProfi__UserI__18EBB532");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CarRental.Domain.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CarRental.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CarRental.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CarRental.Domain.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CarRental.Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Domain.Auth.User", b =>
                {
                    b.Navigation("CarRentalHistoryCustomers");

                    b.Navigation("CarRentalHistoryLandLords");

                    b.Navigation("CurrentCarRentalStatusCustomers");

                    b.Navigation("CurrentCarRentalStatusLandLords");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("CarRental.Domain.Car.Car", b =>
                {
                    b.Navigation("CarRentalHistories");

                    b.Navigation("CurrentCarRentalStatuses");
                });

            modelBuilder.Entity("CarRental.Domain.Car.CarRentalStatus", b =>
                {
                    b.Navigation("CarRentalHistories");

                    b.Navigation("CurrentCarRentalStatuses");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.CarCategory", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.CarModel", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.City", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.Country", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.FuelType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.Manufacturer", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.PriceCourse", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.PriceType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.Transmision", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRental.Domain.Dictionary.WheelType", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
